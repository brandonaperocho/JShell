package a2;

public class Move implements DirectoryCommand {
  private Directory main;
  private Directory root;
  private String initPath;
  private String newPath;
  private String initial;
  private String toBeMoved;
  private String newP;
  private String checkFile;
  private String temp;

  public Move(Directory mainDir, Directory rootDir, String oP, String nP) {
    main = mainDir;
    root = rootDir;
    initPath = oP;
    newPath = nP;
  }

  public Directory moveDir() {
    ChangeDirectory tempOldAct2 = new ChangeDirectory(main, root, initPath);
    ChangeDirectory tempNew2 = new ChangeDirectory(main, root, newPath);
    Directory tempOldAct = tempOldAct2.execute();
    Directory tempNew = tempNew2.execute();
    String t1 = tempOldAct.getParent().getFullPath();
    String t2 = tempNew.getParent().getFullPath();
    if (tempOldAct2.isValid() && tempNew2.isValid()
        && !tempNew.getFullPath().contains(tempOldAct.getFullPath())) {
      toBeMoved = tempOldAct.getName();
      Directory tempOld = tempOldAct.getParent();
      Directory x = new CopyItem(tempOldAct, tempNew).returnDirectory();
      tempOld.removeDirectory(toBeMoved); // remove it from the old location
      tempOldAct.changeParent(x.getParent()); // change it's parent to the new
      if (tempNew.containsDirectory(toBeMoved)) {
        tempNew.removeDirectory(toBeMoved);
      }
      tempNew.addDirectory(x);
    } else {
      System.out.println("Can't move " + initPath + " into " + newPath + "!");
    }
    if (!main.getFullPath().equals("/") && main.getFullPath().contains(t1)
        && !t1.equals(t2)) {
      if (t1.equals("/")) {
        temp = main.getFullPath().substring(t1.length());
      } else {
        temp = main.getFullPath().substring(t1.length() + 1);
      }
      Directory y = new ChangeDirectory(main, root, "/").execute();
      Directory z = new ChangeDirectory(y, root, newPath).execute();
      Directory finalz = new ChangeDirectory(z, root, temp).execute();
      return finalz;
    } else {
      return main;
    }
  }

  public void getNames() {
    initial = new GetFullPath(main, initPath).getWithoutLast();
    newP = new GetFullPath(main, newPath).getWithoutLast();
    checkFile = new GetFullPath(main, newPath).getLast();
    toBeMoved = new GetFullPath(main, initPath).getLast();
  }


  public Directory moveFile() {
    getNames();
    if (!toBeMoved.equals("/")) {
      Directory temp = new ChangeDirectory(main, root, initial).execute();
      if (temp.containsFile(toBeMoved)) {
        File tempMove = temp.getChildFile(toBeMoved);
        Directory check = new ChangeDirectory(main, root, newP).execute();
        if (check.containsFile(checkFile)) {
          temp.removeFile(toBeMoved);
          File das = check.getChildFile(checkFile);
          das.overwriteContents(tempMove.getContents());
          return main;
        }
        ChangeDirectory x = new ChangeDirectory(main, root, newPath);
        Directory newer = x.execute();
        if (x.isValid()) {
          temp.removeFile(toBeMoved);
          tempMove.changeParent(newer);
          if (newer.containsFile(toBeMoved)) {
            newer.removeFile(toBeMoved);
            newer.addFile(tempMove);
          } else {
            newer.addFile(tempMove);
          }
        } else {
          System.out
              .println("Can't move " + initPath + " into " + newPath + "!");
        }
      } else {
        System.out.println("Can't move " + initPath + " into " + newPath + "!");
      }
    } else {
      System.out.println("Can't move " + initPath + " into " + newPath + "!");
    }
    return main;
  }



  @Override
  public Directory execute() {
    ChangeDirectory decider = new ChangeDirectory(main, root, initPath);
    decider.execute();
    if (decider.isValid()) {
      return moveDir();
    } else {
      return moveFile();
    }
  }

}
